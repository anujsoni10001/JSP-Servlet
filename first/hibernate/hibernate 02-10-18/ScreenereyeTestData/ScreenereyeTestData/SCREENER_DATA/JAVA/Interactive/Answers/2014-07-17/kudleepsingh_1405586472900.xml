<?xml version="1.0" encoding="UTF-8"?>
<QUESTION_PAPER>
   <QUESTION_PAPER_INFORMATION>
      <QUESTION_PAPER_DESCRIPTION>SET A</QUESTION_PAPER_DESCRIPTION>
   </QUESTION_PAPER_INFORMATION>
   <QUESTION>
      <QUESTION_ID>1</QUESTION_ID>
      <QUESTION_CATEGORY_NAME>SQL</QUESTION_CATEGORY_NAME>
      <QUESTION_TYPE>TEXT</QUESTION_TYPE>
      <QUESTION_INSTRUCTION> </QUESTION_INSTRUCTION>
      <QUESTION_DESCRIPTION> Write SQL SELECT query to get total number of customers living in “Arizona”.
&lt;b&gt;Table : customer&lt;/b&gt;&lt;br&gt;&lt;pre id=""&gt;&lt;table border="1" class='table table-bordered'&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;customerid&lt;/th&gt;&lt;th&gt;firstname&lt;/th&gt;&lt;th&gt;lastname&lt;/th&gt;&lt;th&gt;city&lt;/th&gt;&lt;th&gt;state&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10101&lt;/td&gt; &lt;td&gt;John1&lt;/td&gt; &lt;td&gt;Gray1&lt;/td&gt; &lt;td&gt;Lynden&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10298&lt;/td&gt; &lt;td&gt;Lyon&lt;/td&gt; &lt;td&gt;Brown&lt;/td&gt; &lt;td&gt;Pinetop&lt;/td&gt; &lt;td&gt;Arizona&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10299&lt;/td&gt; &lt;td&gt;Elory&lt;/td&gt; &lt;td&gt;Keller&lt;/td&gt; &lt;td&gt;Snoqualmie&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10315&lt;/td&gt; &lt;td&gt;Lisa&lt;/td&gt; &lt;td&gt;Jones&lt;/td&gt; &lt;td&gt;Oshkosh&lt;/td&gt; &lt;td&gt;Wisconsin&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10325&lt;/td&gt; &lt;td&gt;Ginger&lt;/td&gt; &lt;td&gt;Schultz&lt;/td&gt; &lt;td&gt;Pocatello&lt;/td&gt; &lt;td&gt;Idaho&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10329&lt;/td&gt; &lt;td&gt;Kelly&lt;/td&gt; &lt;td&gt;Mendoza&lt;/td&gt; &lt;td&gt;Kailua&lt;/td&gt; &lt;td&gt;Hawaii&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10330&lt;/td&gt; &lt;td&gt;Shawn&lt;/td&gt; &lt;td&gt;Dalton&lt;/td&gt; &lt;td&gt;Kannonbeach&lt;/td&gt; &lt;td&gt;Oragon&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10338&lt;/td&gt; &lt;td&gt;Michel&lt;/td&gt; &lt;td&gt;Howell&lt;/td&gt; &lt;td&gt;Tillamook&lt;/td&gt; &lt;td&gt;Oragon&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10339&lt;/td&gt; &lt;td&gt;Anthony&lt;/td&gt; &lt;td&gt;Sanchez&lt;/td&gt; &lt;td&gt;Winslow&lt;/td&gt; &lt;td&gt;Arizona&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10408&lt;/td&gt; &lt;td&gt;Elron&lt;/td&gt; &lt;td&gt;Cleaver&lt;/td&gt; &lt;td&gt;Globe&lt;/td&gt; &lt;td&gt;Arizona&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10410&lt;/td&gt; &lt;td&gt;MaryAnn&lt;/td&gt; &lt;td&gt;Howell&lt;/td&gt; &lt;td&gt;Charleston&lt;/td&gt; &lt;td&gt;SouthCarolina&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10449&lt;/td&gt; &lt;td&gt;Cofi&lt;/td&gt; &lt;td&gt;Annan&lt;/td&gt; &lt;td&gt;Toronto&lt;/td&gt; &lt;td&gt;Idhao&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/pre&gt;</QUESTION_DESCRIPTION>
      <ANSWER> </ANSWER>
      <MARK>0</MARK>
      <CORRECT_ANSWER>[{"0":3}]</CORRECT_ANSWER>
   </QUESTION>
   <QUESTION>
      <QUESTION_ID>2</QUESTION_ID>
      <QUESTION_CATEGORY_NAME>SQL</QUESTION_CATEGORY_NAME>
      <QUESTION_TYPE>TEXT</QUESTION_TYPE>
      <QUESTION_INSTRUCTION> </QUESTION_INSTRUCTION>
      <QUESTION_DESCRIPTION>The schema for "customer" and "purchase_order" table is defined below along with sample data. Write a SQL query to get first name and last name of customer who have NOT placed any purchase order.&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;b&gt;Table : customer&lt;/b&gt;&lt;br&gt;&lt;pre id=""&gt;&lt;table border="1" class='table table-bordered'&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;customerid&lt;/th&gt;&lt;th&gt;firstname&lt;/th&gt;&lt;th&gt;lastname&lt;/th&gt;&lt;th&gt;city&lt;/th&gt;&lt;th&gt;state&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10101&lt;/td&gt; &lt;td&gt;John&lt;/td&gt; &lt;td&gt;Gray&lt;/td&gt; &lt;td&gt;Lynden&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10298&lt;/td&gt; &lt;td&gt;Lyon&lt;/td&gt; &lt;td&gt;Brown&lt;/td&gt; &lt;td&gt;Pinetop&lt;/td&gt; &lt;td&gt;Arizona&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10299&lt;/td&gt; &lt;td&gt;Elory&lt;/td&gt; &lt;td&gt;Keller&lt;/td&gt; &lt;td&gt;Snoqualmie&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10315&lt;/td&gt; &lt;td&gt;Lisa&lt;/td&gt; &lt;td&gt;Jones&lt;/td&gt; &lt;td&gt;Oshkosh&lt;/td&gt; &lt;td&gt;Wisconsin&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10325&lt;/td&gt; &lt;td&gt;Ginger&lt;/td&gt; &lt;td&gt;Schultz&lt;/td&gt; &lt;td&gt;Pocatello&lt;/td&gt; &lt;td&gt;Idaho&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10329&lt;/td&gt; &lt;td&gt;Kelly&lt;/td&gt; &lt;td&gt;Mendoza&lt;/td&gt; &lt;td&gt;Kailua&lt;/td&gt; &lt;td&gt;Hawaii&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10330&lt;/td&gt; &lt;td&gt;Shawn&lt;/td&gt; &lt;td&gt;Dalton&lt;/td&gt; &lt;td&gt;Kannonbeach&lt;/td&gt; &lt;td&gt;Oragon&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10338&lt;/td&gt; &lt;td&gt;Michel&lt;/td&gt; &lt;td&gt;Howell&lt;/td&gt; &lt;td&gt;Tillamook&lt;/td&gt; &lt;td&gt;Oragon&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10339&lt;/td&gt; &lt;td&gt;Anthony&lt;/td&gt; &lt;td&gt;Sanchez&lt;/td&gt; &lt;td&gt;Winslow&lt;/td&gt; &lt;td&gt;Arizona&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10408&lt;/td&gt; &lt;td&gt;Elron&lt;/td&gt; &lt;td&gt;Cleaver&lt;/td&gt; &lt;td&gt;Globe&lt;/td&gt; &lt;td&gt;Arizona&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10410&lt;/td&gt; &lt;td&gt;MaryAnn&lt;/td&gt; &lt;td&gt;Howell&lt;/td&gt; &lt;td&gt;Charleston&lt;/td&gt; &lt;td&gt;SouthCarolina&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10449&lt;/td&gt; &lt;td&gt;Cofi&lt;/td&gt; &lt;td&gt;Annan&lt;/td&gt; &lt;td&gt;Toronto&lt;/td&gt; &lt;td&gt;Idhao&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/pre&gt;&lt;br&gt;&lt;b&gt;Table : purchase_order&lt;/b&gt;&lt;br&gt;&lt;pre id=""&gt;&lt;pre id=""&gt;&lt;table border="1" class='table table-bordered'&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;purchase_order_id&lt;/th&gt;&lt;th&gt;customerid&lt;/th&gt;&lt;th&gt;order_date&lt;/th&gt;&lt;th&gt;item&lt;/th&gt;&lt;th&gt;quantity&lt;/th&gt;&lt;th&gt;price&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;10330&lt;/td&gt; &lt;td&gt;1990-06-30&lt;/td&gt; &lt;td&gt;Pogo stick&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;28&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;10101&lt;/td&gt; &lt;td&gt;1999-06-30&lt;/td&gt; &lt;td&gt;Raft&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;58&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;10298&lt;/td&gt; &lt;td&gt;1999-07-01&lt;/td&gt; &lt;td&gt;Skateboard&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;33&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;10101&lt;/td&gt; &lt;td&gt;1999-07-01&lt;/td&gt; &lt;td&gt;Life Vest&lt;/td&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;125&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;10299&lt;/td&gt; &lt;td&gt;1999-07-06&lt;/td&gt; &lt;td&gt;Parachute&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;1250&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;6&lt;/td&gt; &lt;td&gt;10339&lt;/td&gt; &lt;td&gt;1999-07-27&lt;/td&gt; &lt;td&gt;Umbrella&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;4.5&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;7&lt;/td&gt; &lt;td&gt;10449&lt;/td&gt; &lt;td&gt;1999-08-13&lt;/td&gt; &lt;td&gt;Unicycle&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;180.79&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;8&lt;/td&gt; &lt;td&gt;10101&lt;/td&gt; &lt;td&gt;1999-08-18&lt;/td&gt; &lt;td&gt;Raln Coat&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;18.3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;9&lt;/td&gt; &lt;td&gt;10449&lt;/td&gt; &lt;td&gt;1999-09-01&lt;/td&gt; &lt;td&gt;Snow Shoes&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;45&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10&lt;/td&gt; &lt;td&gt;10449&lt;/td&gt; &lt;td&gt;1999-08-14&lt;/td&gt; &lt;td&gt;Ski Poles&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;25&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;11&lt;/td&gt; &lt;td&gt;10449&lt;/td&gt; &lt;td&gt;1999-09-18&lt;/td&gt; &lt;td&gt;Tent&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;58&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;12&lt;/td&gt; &lt;td&gt;10410&lt;/td&gt; &lt;td&gt;1999-10-28&lt;/td&gt; &lt;td&gt;Sleeping Bag&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;89.22&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;13&lt;/td&gt; &lt;td&gt;10298&lt;/td&gt; &lt;td&gt;1999-09-19&lt;/td&gt; &lt;td&gt;Lantern&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;29&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;14&lt;/td&gt; &lt;td&gt;10338&lt;/td&gt; &lt;td&gt;1999-09-01&lt;/td&gt; &lt;td&gt;Umbrella&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;6.75&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;10298&lt;/td&gt; &lt;td&gt;1999-12-01&lt;/td&gt; &lt;td&gt;Helmet&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;22&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16&lt;/td&gt; &lt;td&gt;10449&lt;/td&gt; &lt;td&gt;1999-12-15&lt;/td&gt; &lt;td&gt;Bicycle&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;380.5&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;17&lt;/td&gt; &lt;td&gt;10449&lt;/td&gt; &lt;td&gt;1999-12-22&lt;/td&gt; &lt;td&gt;Canoe&lt;/td&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;280&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;18&lt;/td&gt; &lt;td&gt;10101&lt;/td&gt; &lt;td&gt;1999-12-30&lt;/td&gt; &lt;td&gt;Hoola Hoop&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;14.75&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/pre&gt; &lt;/pre&gt;&lt;br&gt;&lt;/div&gt;</QUESTION_DESCRIPTION>
      <ANSWER> </ANSWER>
      <MARK>0</MARK>
      <CORRECT_ANSWER>[{"1":"Jones","0":"Lisa"},{"1":"Schultz","0":"Ginger"},{"1":"Mendoza","0":"Kelly"},{"1":"Cleaver","0":"Elron"}]</CORRECT_ANSWER>
   </QUESTION>
   <QUESTION>
      <QUESTION_ID>3</QUESTION_ID>
      <QUESTION_CATEGORY_NAME>SQL</QUESTION_CATEGORY_NAME>
      <QUESTION_TYPE>TEXT</QUESTION_TYPE>
      <QUESTION_INSTRUCTION> </QUESTION_INSTRUCTION>
      <QUESTION_DESCRIPTION>&lt;div&gt;The schema for "customer" table is defined below with sample data. Write SQL query to get First Name and Last name of customer concatenated together separated by “,” .&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;b&gt;&amp;nbsp;Expected output:&lt;/b&gt;&lt;br&gt; John,Gray&lt;br&gt; Lisa,Jones&lt;br&gt; Shawn,Dalton&lt;br&gt; &lt;br&gt;&lt;b&gt;Table : customer&lt;/b&gt;&lt;br&gt;&lt;pre id=""&gt;&lt;table border="1" class='table table-bordered'&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;customerid&lt;/th&gt;&lt;th&gt;firstname&lt;/th&gt;&lt;th&gt;lastname&lt;/th&gt;&lt;th&gt;city&lt;/th&gt;&lt;th&gt;state&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10101&lt;/td&gt; &lt;td&gt;John&lt;/td&gt; &lt;td&gt;Gray&lt;/td&gt; &lt;td&gt;Lynden&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10298&lt;/td&gt; &lt;td&gt;Lyon&lt;/td&gt; &lt;td&gt;Brown&lt;/td&gt; &lt;td&gt;Pinetop&lt;/td&gt; &lt;td&gt;Arizona&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10299&lt;/td&gt; &lt;td&gt;Elory&lt;/td&gt; &lt;td&gt;Keller&lt;/td&gt; &lt;td&gt;Snoqualmie&lt;/td&gt; &lt;td&gt;Washington&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10315&lt;/td&gt; &lt;td&gt;Lisa&lt;/td&gt; &lt;td&gt;Jones&lt;/td&gt; &lt;td&gt;Oshkosh&lt;/td&gt; &lt;td&gt;Wisconsin&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10325&lt;/td&gt; &lt;td&gt;Ginger&lt;/td&gt; &lt;td&gt;Schultz&lt;/td&gt; &lt;td&gt;Pocatello&lt;/td&gt; &lt;td&gt;Idaho&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10329&lt;/td&gt; &lt;td&gt;Kelly&lt;/td&gt; &lt;td&gt;Mendoza&lt;/td&gt; &lt;td&gt;Kailua&lt;/td&gt; &lt;td&gt;Hawaii&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10330&lt;/td&gt; &lt;td&gt;Shawn&lt;/td&gt; &lt;td&gt;Dalton&lt;/td&gt; &lt;td&gt;Kannonbeach&lt;/td&gt; &lt;td&gt;Oragon&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10338&lt;/td&gt; &lt;td&gt;Michel&lt;/td&gt; &lt;td&gt;Howell&lt;/td&gt; &lt;td&gt;Tillamook&lt;/td&gt; &lt;td&gt;Oragon&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10339&lt;/td&gt; &lt;td&gt;Anthony&lt;/td&gt; &lt;td&gt;Sanchez&lt;/td&gt; &lt;td&gt;Winslow&lt;/td&gt; &lt;td&gt;Arizona&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10408&lt;/td&gt; &lt;td&gt;Elron&lt;/td&gt; &lt;td&gt;Cleaver&lt;/td&gt; &lt;td&gt;Globe&lt;/td&gt; &lt;td&gt;Arizona&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10410&lt;/td&gt; &lt;td&gt;MaryAnn&lt;/td&gt; &lt;td&gt;Howell&lt;/td&gt; &lt;td&gt;Charleston&lt;/td&gt; &lt;td&gt;SouthCarolina&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;10449&lt;/td&gt; &lt;td&gt;Cofi&lt;/td&gt; &lt;td&gt;Annan&lt;/td&gt; &lt;td&gt;Toronto&lt;/td&gt; &lt;td&gt;Idhao&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</QUESTION_DESCRIPTION>
      <ANSWER> </ANSWER>
      <MARK>0</MARK>
      <CORRECT_ANSWER>[{"0":"John,Gray"},{"0":"Lyon,Brown"},{"0":"Elory,Keller"},{"0":"Lisa,Jones"},{"0":"Ginger,Schultz"},{"0":"Kelly,Mendoza"},{"0":"Shawn,Dalton"},{"0":"Michel,Howell"},{"0":"Anthony,Sanchez"},{"0":"Elron,Cleaver"},{"0":"MaryAnn,Howell"},{"0":"Cofi,Annan"}]</CORRECT_ANSWER>
   </QUESTION>
   <QUESTION>
      <QUESTION_ID>4</QUESTION_ID>
      <QUESTION_CATEGORY_NAME>JAVA</QUESTION_CATEGORY_NAME>
      <QUESTION_TYPE>TEXT</QUESTION_TYPE>
      <QUESTION_INSTRUCTION>1) Please write java code inside the method 'countWords(String str)'.&lt;BR&gt;&lt;BR&gt; 2) Please implement this method to return the words count in a given string Assume that a parameter string can only contains spaces and alphanumeric characters.&lt;BR&gt;&lt;BR&gt;3) The method is expected to following input may be provided and desired output corresponding to respective input is shown below&lt;BR&gt;
      &lt;TABLE border='1' style='width:400px;margin-left: 20px;' class='table table-bordered'&gt;&lt;TR&gt;&lt;TH&gt;Input&lt;/TH&gt;&lt;TH&gt;Output&lt;/TH&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD&gt;"This is my world"&lt;/TD&gt;&lt;TD&gt;4&lt;/TD&gt; &lt;/TR&gt;&lt;TR &gt;&lt;TD&gt;""&lt;/TD&gt;&lt;TD&gt;0&lt;/TD&gt;&lt;/TR&gt;&lt;TR &gt;&lt;TD&gt;"what isthis"&lt;/TD&gt;&lt;TD&gt;2&lt;/TD&gt;&lt;/TR&gt;&lt;TR &gt;&lt;TD&gt;"This is my world www"&lt;/TD&gt;&lt;TD&gt;5&lt;/TD&gt;&lt;/TR&gt;&lt;TR &gt;&lt;TD&gt;null&lt;/TD&gt;&lt;TD&gt;Handle Exception&lt;/TD&gt;&lt;/TR&gt; &lt;/TABLE&gt; &lt;h5&gt;Please do not change class name and method name&lt;/h5&gt;
      
      </QUESTION_INSTRUCTION>
      <QUESTION_DESCRIPTION>public class MyClassOne
 {&lt;BR&gt; public static int countWords(String s)&lt;BR&gt;{&lt;BR&gt;&lt;BR&gt; // write your code here&lt;BR&gt;&lt;BR&gt; }&lt;BR&gt; public static void main(String arr[])&lt;BR&gt; {&lt;BR&gt; /* countWords("This is my world");*/&lt;BR&gt; }&lt;BR&gt; } &lt;BR&gt; </QUESTION_DESCRIPTION>
      <ANSWER>public class MyClassOne&lt;br&gt; {&lt;br&gt; public static int countWords(String s)&lt;br&gt;{&lt;br&gt;&lt;br&gt; // write your code here&lt;br&gt; return 4;&lt;br&gt;&lt;br&gt; }&lt;br&gt; public static void main(String arr[])&lt;br&gt; {&lt;br&gt; /* countWords("This is my world");*/&lt;br&gt; }&lt;br&gt; } &lt;br&gt; </ANSWER>
      <MARK>0</MARK>
      <TEST_CASE>
         <TEST_SCRIPT>@Test public void countWordsTest1(){ assertEquals(4,countWords("This is my world"));}</TEST_SCRIPT>
         <TEST_SCRIPT>@Test public void countWordsTest2(){ assertEquals(0,countWords(""));}</TEST_SCRIPT>
         <TEST_SCRIPT>@Test public void countWordsTest3(){ try{countWords(null);} catch(NullPointerException e){ assertTrue(false);}}</TEST_SCRIPT>
         <TEST_SCRIPT>@Test public void countWordsTest4(){ assertEquals(2,countWords("what isthis"));}</TEST_SCRIPT>
         <TEST_SCRIPT>@Test public void countWordsTest5(){ assertEquals(5,countWords("This is my world www"));}</TEST_SCRIPT>
      </TEST_CASE>
   </QUESTION>
   <QUESTION>
      <QUESTION_ID>5</QUESTION_ID>
      <QUESTION_CATEGORY_NAME>JAVA</QUESTION_CATEGORY_NAME>
      <QUESTION_TYPE>TEXT</QUESTION_TYPE>
      <QUESTION_INSTRUCTION>1) Please write java code inside the method 'getPrimeNumbers(int from,int to)'.&lt;BR&gt;&lt;BR&gt;2) Please implement this method to return the "array of prime number" within the given range&lt;BR&gt;&lt;BR&gt;3) The method is expected to following input may be provided and desired output corresponding to respective input is shown below&lt;BR&gt;
      &lt;TABLE border='1' style='width:400px;margin-left: 20px;' class='table table-bordered'&gt;&lt;TR&gt;&lt;TH&gt;Input&lt;/TH&gt;&lt;TH&gt;Output&lt;/TH&gt;&lt;/TR&gt;&lt;tr&gt;	&lt;td&gt;(0,10)&lt;/td&gt;	&lt;td&gt;{2, 3, 5, 7}&lt;/td&gt;&lt;/tr&gt;	&lt;/tr&gt;&lt;tr&gt;	&lt;td&gt;(25,60)&lt;/td&gt;	&lt;td&gt;{29,31,37,41,43,47,53,59}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;	&lt;td&gt;(7,9)&lt;/td&gt;	&lt;td&gt;{7}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;	&lt;td&gt;(11,11)&lt;/td&gt;	&lt;td&gt;{11}&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;	&lt;td&gt;(0,5)&lt;/td&gt;	&lt;td&gt;{2,3,5}&lt;/td&gt;&lt;/tr&gt;&lt;table&gt;&lt;h5&gt;Please do not change class name and method name&lt;/h5&gt;</QUESTION_INSTRUCTION>
      <QUESTION_DESCRIPTION> public class MyClassTwo 
{ &lt;BR&gt;public static int[] getPrimeNumbers(int from,int to)&lt;BR&gt; {&lt;BR&gt;&lt;BR&gt;//write your code here&lt;BR&gt;&lt;BR&gt;} &lt;BR&gt;&lt;BR&gt;public static void main(String arr[]) {&lt;BR&gt; /*getPrimeNumbers(0,10);*/    &lt;BR&gt; }&lt;BR&gt; }</QUESTION_DESCRIPTION>
      <ANSWER> </ANSWER>
      <MARK>0</MARK>
      <TEST_CASE>
         <TEST_SCRIPT>@Test public void getPrimeNumberTest1(){int[] temp_array = {2, 3, 5, 7}; Assert.assertTrue(Arrays.equals(temp_array,getPrimeNumbers(0,10)));}</TEST_SCRIPT>
         <TEST_SCRIPT>@Test public void getPrimeNumberTest2(){int[] temp_array = {29,31,37,41,43,47,53,59}; Assert.assertTrue(Arrays.equals(temp_array,getPrimeNumbers(25,60)));}</TEST_SCRIPT>
         <TEST_SCRIPT>@Test public void getPrimeNumberTest3(){int[] temp_array = {7}; Assert.assertTrue(Arrays.equals(temp_array,getPrimeNumbers(7,9)));}</TEST_SCRIPT>
         <TEST_SCRIPT>@Test public void getPrimeNumberTest4(){int[] temp_array = {11}; Assert.assertTrue(Arrays.equals(temp_array,getPrimeNumbers(11,11)));}</TEST_SCRIPT>
         <TEST_SCRIPT>@Test public void getPrimeNumberTest5(){int[] temp_array = {2,3,5}; Assert.assertTrue(Arrays.equals(temp_array,getPrimeNumbers(0,5)));}</TEST_SCRIPT>
      </TEST_CASE>
   </QUESTION>
  
</QUESTION_PAPER>
