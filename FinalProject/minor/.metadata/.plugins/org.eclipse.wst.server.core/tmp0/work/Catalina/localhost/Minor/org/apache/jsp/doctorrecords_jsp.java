/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.29
 * Generated at: 2019-03-22 15:35:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import pp.RegisteredDao;

public final class doctorrecords_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("pp.RegisteredDao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- \r\n");
      out.write("Property\tDescription\r\n");
      out.write("onreadystatechange\tDefines a function to be called when the readyState property changes\r\n");
      out.write("readyState\tHolds the status of the XMLHttpRequest.\r\n");
      out.write("0: request not initialized \r\n");
      out.write("1: server connection established\r\n");
      out.write("2: request received \r\n");
      out.write("3: processing request \r\n");
      out.write("4: request finished and response is ready\r\n");
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("<html>  \r\n");
      out.write("<head>  \r\n");
      out.write("<script>  \r\n");
      out.write("var request;  \r\n");
      out.write("function sendInfo()  \r\n");
      out.write("{  \r\n");
      out.write("var v=document.vinform.t1.value;  \r\n");
      out.write("var url=\"index3.jsp?val=\"+v;  \r\n");
      out.write("  \r\n");
      out.write("if(window.XMLHttpRequest){  \r\n");
      out.write("request=new XMLHttpRequest();  \r\n");
      out.write("}  \r\n");
      out.write("else if(window.ActiveXObject){  \r\n");
      out.write("request=new ActiveXObject(\"Microsoft.XMLHTTP\");  \r\n");
      out.write("}  \r\n");
      out.write("  \r\n");
      out.write("try{  \r\n");
      out.write("request.onreadystatechange=getInfo;  \r\n");
      out.write("request.open(\"GET\",url,true);  \r\n");
      out.write("request.send();  \r\n");
      out.write("}catch(e){alert(\"Unable to connect to server\");}  \r\n");
      out.write("}  \r\n");
      out.write("  \r\n");
      out.write("function getInfo(){  \r\n");
      out.write("if(request.readyState==4){  \r\n");
      out.write("var val=request.responseText;  \r\n");
      out.write("document.getElementById('amit').innerHTML=val;  \r\n");
      out.write("}  \r\n");
      out.write("}  \r\n");
      out.write("</script>  \r\n");
      out.write("</head>  \r\n");
      out.write("<body>  \r\n");
      out.write("<marquee><h1>Doctors-Record</h1></marquee>  \r\n");
      out.write("<pre>\r\n");
      out.write("<form name=\"vinform\" action=\"Appoint\">  \r\n");
      out.write("Doctor-ID<select name=\"t1\" onChange=\"sendInfo()\">\r\n");

RegisteredDao rd=new RegisteredDao();
java.util.ArrayList<pp.Doctor> a1=rd.ShowPro();
for(pp.Doctor d:a1)
{

      out.write("\r\n");
      out.write("<option>");
      out.print(d.getDoctorId());
      out.write("</option>\r\n");

}

      out.write("\r\n");
      out.write("</select>  \r\n");
      out.write("<span id=\"amit\"></span>\r\n");
      out.write("</form>  \r\n");
      out.write("</pre>\r\n");
      out.write("</body>  \r\n");
      out.write("</html>  ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
